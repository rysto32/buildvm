#!/bin/sh

cleanup()
{
	sudo umount -f $mountdir
	sudo mdconfig -d -u $memdisk
}

set -e

image=""
memdisk=""
mountdir=""
scriptdir=$(dirname $(realpath $0))
unset MODULES_OVERRIDE

cleanup()
{
	if [ -n "$mountdir" ]
	then
		sudo umount -f $mountdir
		rm -rf $mountdir
	fi

	if [ -n "$memdisk" ]
	then
		sudo mdconfig -d -u $memdisk
	fi

	if [ -n "$image" ]
	then
		rm -rf $image
	fi
}

trap cleanup TERM INT QUIT 

arch=amd64
unset buildname
kernconf=GENERIC
size=8G
unset worldclean
unset kernclean

while getopts "b:c:Km:Nt:u:W" o
do
	case "$o"
	in
	b)
		buildname="$OPTARG"
		;;
	c)
		kernconf="$OPTARG"
		;;
	K)
		if [ -z "$kernclean" ]
		then
			kernclean="-DNO_KERNCLEAN"
		else
			kernclean="-DKERNFAST"
		fi
		;;
	m)
		arch="$OPTARG"
		;;
	S)
		size=$OPTARG
		;;
	t)
		buildtype="$OPTARG"
		;;
	u)
		user="$OPTARG"
		;;
	W)
		worldclean="-DNO_CLEAN"
		;;
	esac
done

shift $((OPTIND - 1))
OPTIND=1

if [ -n "$1" ]
then
        echo "Unrecognized argument $1"
	exit 1
fi

if [ -z "$buildname" ]
then
	echo "Usage: $0 [ -t official | -u user ] -b <buildname>"
	exit 1
fi

if [ -z "$buildtype" -o "$buildtype" = user ]
then
	if [ -z "$user" ]
	then
		echo "-u option is mandatory for non-official builds" >&2
		exit 1
	fi

	builddir="/vmimages/user/$user/$arch/$buildname"
	mkdir -p $builddir

elif [ "$buildtype" = official ]
then
	builddir="/vmimages/official/$arch/$buildname"
	mkdir -p $builddir
else
	echo "Unknown build type $buildtype"
	exit 1
fi

set -e

committime=`git show -s --format='%ct' HEAD`
commithash=`git show -s --format='%H' HEAD`

commityear=`date -r $committime +%Y`
commitmonth=`date -r $committime +%m`
commitday=`date -r $committime +%d`

imagedir="$builddir/$commityear/$commitmonth/$commitday"
image="$imagedir/$commithash.raw"

sudo mkdir -p $imagedir

if [ -e "$image" ]
then
	echo "$image already exists"
	
	# Don't remove existing image in cleanup!
	unset image

	cleanup
	exit 1
fi

#make TARGET_ARCH=$arch __MAKE_CONF=$scriptdir/make.conf make
make -j16 buildworld buildkernel TARGET_ARCH=$arch __MAKE_CONF=$scriptdir/make.conf $kernclean $worldclean KERNCONF=$kernconf

memdisk=`sudo mdconfig -a -t swap -s $size`

sudo gpart create -s MBR $memdisk
sudo gpart add -t freebsd -i 1 $memdisk

sudo gpart create -s BSD ${memdisk}s1
sudo gpart set -a active -i 1 $memdisk
sudo gpart add -t freebsd-ufs ${memdisk}s1

suj=""
if sudo newfs 2>&1 | grep -q -- -j
then
	suj="-j"
fi

sudo newfs -U -L ROOT -U $suj -t /dev/${memdisk}s1a

mountdir=`mktemp -d -t vmimage`
sudo mount /dev/${memdisk}s1a $mountdir

sudo make installworld installkernel distribution DESTDIR="$mountdir" TARGET_ARCH=$arch __MAKE_CONF=$scriptdir/make.conf KERNCONF=$kernconf WITHOUT_DEBUG_FILES=yes || cleanup

sudo cp $scriptdir/make.conf $mountdir/etc
sudo cp $scriptdir/src.conf $mountdir/etc

cat - <<EOF | sudo tee $mountdir/etc/rc.conf > /dev/null
sshd_enable="YES"
ifconfig_vtnet0="DHCP"
sendmail_enable="NONE"

EOF

cat - <<EOF | sudo tee $mountdir/etc/fstab > /dev/null
/dev/ufs/ROOT		/		ufs	rw,noatime	1	1
rstone-server:/usr/home /usr/home	nfs	rw,noatime	0	0
rstone-server:/usr/obj	/usr/obj	nfs	ro,noatime	0	0
rstone-server:/repos /repos		nfs	ro,noatime	0	0
#/dev/ada1		none		swap	sw		0	0

EOF

cat - << EOF | sudo tee $mountdir/boot/loader.conf > /dev/null
console="comconsole,vidconsole"
comconsole_speed="115200"

virtio_load="YES"
virtio_pci_load="YES"
virtio_blk_load="YES"
if_vtnet_load="YES"
virtio_balloon_load="YES"

debug.kdb.alt_break_to_debugger=1

EOF

sudo sed -i"" -E 's?^ttyu0[[:space:]].*?ttyu0   "/usr/libexec/getty 3wire.115200"   vt102 on secure?' $mountdir/etc/ttys

sudo truncate -s 0 $mountdir/etc/motd

sudo pw -V $mountdir/etc useradd rstone -u 1001 -G wheel -s /bin/sh
sudo pw -V $mountdir/etc usermod root -s /bin/sh
sudo mkdir -p $mountdir/usr/home $mountdir/usr/obj $mountdir/repos
sudo ln -s usr/home $mountdir/home

sudo cp $mountdir/usr/share/zoneinfo/America/Toronto $mountdir/etc/localtime

sudo gpart bootcode -b $mountdir/boot/mbr $memdisk
sudo gpart bootcode -b $mountdir/boot/boot ${memdisk}s1

sudo umount $mountdir
sudo dd if=/dev/$memdisk of=$image bs=1m
sudo ln -fs $image $builddir/LATEST
sudo mdconfig -d -u $memdisk
sudo rm -rf $mountdir

